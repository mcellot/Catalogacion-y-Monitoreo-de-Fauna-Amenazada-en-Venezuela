import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image
import os
import csv
from datetime import datetime

# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="Clasificador de Fauna Venezolana", page_icon="üêæ", layout="wide")

# Agregar CSS personalizado
st.markdown(
    """
    <style>
        body {
            background-image: url('https://example.com/maiquetia_background.jpg'); /* URL de la imagen de Maiquet√≠a */
            background-size: cover;
            color: white;
        }
        h1, h2, h3, h4 {
            text-shadow: 2px 2px 4px rgba(0,0,0,0.7);
        }
        .animacion {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 300px;
        }
        .no-space {
            margin: 0;
            padding: 0;
        }
    </style>
    """,
    unsafe_allow_html=True
)

# Cargar el modelo
model_path = "/content/drive/MyDrive/Modelos/modelo_vgg16_v4_16cat3.h5"
try:
    model = tf.keras.models.load_model(model_path)
except OSError as e:
    st.error(f"No se pudo cargar el modelo: {e}")

def preprocess_image(image):
    if image.mode != 'RGB':
        image = image.convert('RGB')  
    image = image.resize((224, 224))  
    image = np.array(image) / 255.0  
    image = np.expand_dims(image, axis=0)  
    return image

# Lista de nombres de clases
class_names = [
    'Perico Multicolor',
    'Tortuga Arrau',
    'Ballena de Aletas',
    'Gato Tigre',
    'Jaguar',
    'Jicotea',
    'Cotorra Cabeciamarilla',
    'Manat√≠ de las Indias',
    'Mono Ara√±a',
    'Mono Nocturno',
    'Oso Andino',
    'Oso Hormiguero Gigante',
    'Pato de Torrente',
    'Pauj√≠ de Yelmo',
    'Tonina',
    'Venado Andino',
]

# Descripciones de cada animal
species_info = {
    "Perico Multicolor": "El perico multicolor se encuentra en regiones de Am√©rica Central y Am√©rica del Sur. Hay m√∫ltiples especies de pericos, cada una con caracter√≠sticas √∫nicas.",
    "Tortuga Arrau": "Conocida por su caparaz√≥n distintivo, esta tortuga se encuentra principalmente en r√≠os amaz√≥nicos. En peligro de extinci√≥n.",
    "Ballena de Aletas": "Una de las especies m√°s grandes de ballenas, puede crecer hasta 20 metros. Su estado de conservaci√≥n es vulnerable.",
    "Gato Tigre": "Un peque√±o felino que habita en zonas tropicales de Am√©rica del Sur. Su poblaci√≥n es muy reducida debido a la p√©rdida de h√°bitat.",
    "Jaguar": "El felino m√°s poderoso de Am√©rica, habita en bosques tropicales y manglares. Hay una √∫nica especie en peligro de extinci√≥n.",
    "Jicotea": "Conocida tambi√©n como tortuga matamata, es una especie acu√°tica que vive en r√≠os. Su poblaci√≥n es estable, pero vulnerable.",
    "Cotorra Cabeciamarilla": "Esta cotorra colorida es end√©mica de las zonas boscosas de Venezuela. Su poblaci√≥n se ha visto reducida por la deforestaci√≥n.",
    "Manat√≠ de las Indias": "Tambi√©n conocido como vaca marina, es un mam√≠fero acu√°tico que enfrenta amenazas por la p√©rdida de h√°bitat. Hay solo 2 especies reconocidas.",
    "Mono Ara√±a": "Conocido por su inteligencia, este primate habita en los bosques tropicales de Am√©rica del Sur. Hay varias especies en peligro.",
    "Mono Nocturno": "Este primate es activo durante la noche y tiene una poblaci√≥n estable en algunas √°reas. Es un indicador de salud ambiental.",
    "Oso Andino": "El √∫nico oso nativo de Sudam√©rica. Su poblaci√≥n est√° disminuyendo debido a la caza y la p√©rdida de h√°bitat.",
    "Oso Hormiguero Gigante": "Este gran mam√≠fero se alimenta de hormigas y termitas. Su poblaci√≥n est√° debilitada por la caza y la deforestaci√≥n.",
    "Pato de Torrente": "Una especie de pato que vive en r√≠os de monta√±a. Su poblaci√≥n es estable, pero vulnerable a cambios en el h√°bitat.",
    "Pauj√≠ de Yelmo": "Ave emblem√°tica de Venezuela, se encuentra en zonas monta√±osas. Las poblaciones est√°n disminuyendo debido a la caza.",
    "Tonina": "Este delf√≠n de agua dulce vive en r√≠os de Am√©rica del Sur. En corrupci√≥n debido a la pesca y la contaminaci√≥n.",
    "Venado Andino": "Adaptado a la alta monta√±a, este venado es √∫nico de los Andes venezolanos. Su poblaci√≥n es peque√±a y vulnerable.",
}

confidence_threshold = 0.20

# Encabezado con colores venezolanos
st.markdown(
    """
    <div style="background: linear-gradient(90deg, #002B7F, #FCD116, #E40303); padding: 20px; border-radius: 10px;">
        <h1 class="no-space" style="text-align: center;">Clasificador de Fauna Venezolana en Peligro</h1>
        <p style="text-align: center; font-size: 18px;">Identifica especies end√©micas y en peligro en Venezuela</p>
    </div>
    """, unsafe_allow_html=True
)

# Secci√≥n animaci√≥n (Lottie)
st.markdown('<div class="animacion">', unsafe_allow_html=True)
st.markdown('<lottie-player src="https://assets3.lottiefiles.com/packages/lf20_6hsvu07x.json" background="transparent" speed="1" style="width: 300px; height: 300px;" loop autoplay></lottie-player>', unsafe_allow_html=True)
st.markdown('</div>', unsafe_allow_html=True)

# Secci√≥n informativa de especies
st.markdown(
    """
    <div style="background-color: rgba(0, 0, 0, 0.5); padding: 15px; border-radius: 10px; margin-top: 20px;">
        <h3 style="text-align: center;">Especies que puede clasificar el modelo:</h3>
    </div>
    """, unsafe_allow_html=True
)

# Listar especies con descripciones
for idx, species in enumerate(class_names, start=1):
    st.markdown(f"<p style='text-align: center; font-size:16px;'> {idx}. {species}: {species_info[species]}</p>", unsafe_allow_html=True)

# Subir imagen desde la c√°mara
st.markdown("<h3 style='text-align: center;'>üì∏ Captura una imagen desde la c√°mara</h3>", unsafe_allow_html=True)
image_from_camera = st.camera_input("Captura una imagen")

# Subir imagen desde archivo
st.markdown("<h3 style='text-align: center;'>üìÅ O sube una imagen para analizar</h3>", unsafe_allow_html=True)
uploaded_file = st.file_uploader("", type=["jpg", "png", "jpeg"])

# Combinar m√©todos de entrada de imagen
if image_from_camera is not None:
    image = Image.open(image_from_camera)
elif uploaded_file is not None:
    image = Image.open(uploaded_file)
else:
    image = None

# L√≥gica para visualizar y procesar la imagen
if image is not None:
    st.markdown("<h4 style='text-align: center;'>Imagen cargada:</h4>", unsafe_allow_html=True)
    st.image(image, caption="Vista previa", use_column_width=True)

    # Preprocesar imagen y predecir
    image_processed = preprocess_image(image)
    predictions = model.predict(image_processed)

    # Obtener probabilidad y clase predicha
    max_probability = np.max(predictions)
    predicted_index = np.argmax(predictions)

    if max_probability < confidence_threshold:
        st.markdown("<h2 style='color: red; text-align: center;'>‚ö†Ô∏è Animal no registrado</h2>", unsafe_allow_html=True)
    else:
        predicted_species = class_names[predicted_index]
        st.markdown(
            f"<h2 style='color: #002B7F; text-align: center;'>ü¶â Categor√≠a predicha: {predicted_species}</h2>",
            unsafe_allow_html=True
        )
        st.markdown(f"<p style='text-align: center; font-size: 18px;'>", unsafe_allow_html=True)

        # Mostrar descripci√≥n de la especie predicha
        st.markdown(
            f"<div style='text-align: center;'> <h4>Descripci√≥n: {species_info[predicted_species]}</h4></div>",
            unsafe_allow_html=True
        )

        # Secci√≥n de feedback
        st.markdown(
            """
            <div style="background-color: transparent; padding: 15px; border-radius: 10px; margin-top: 20px; text-align: center;">
                <h4>¬øEs correcta la clasificaci√≥n?</h4>
            </div>
            """, unsafe_allow_html=True
        )

        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚úÖ Correcta"):
                log_feedback(predicted_species, f"{max_probability:.2f}", "correcta")
                st.success("¬°Gracias por tu feedback!")
        with col2:
            if st.button("‚ùå Incorrecta"):
                log_feedback(predicted_species, f"{max_probability:.2f}", "incorrecta")
                st.error("¬°Gracias por tu feedback!")

# Pie de p√°gina con cr√©ditos
st.markdown("<br><br>", unsafe_allow_html=True)
st.markdown(
    """
    <hr>
    <p style="text-align: center; font-size: 14px;">
    Proyecto desarrollado con <b>TensorFlow</b> y <b>Streamlit</b> ‚Äì Especial para la fauna venezolana.
    </p>
    """, unsafe_allow_html=True
)

# Cargar el script para Lottie
st.markdown(
    """
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lottie-web/5.7.6/lottie.min.js"></script>
    """, unsafe_allow_html=True
)
